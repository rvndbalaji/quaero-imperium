"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asn1_1 = require("asn1");
const Message_1 = require("./Message");
const ProtocolOperation_1 = require("../ProtocolOperation");
class BindRequest extends Message_1.Message {
    constructor(options) {
        super(options);
        this.protocolOperation = ProtocolOperation_1.ProtocolOperation.LDAP_REQ_BIND;
        this.dn = options.dn || '';
        this.password = options.password || '';
    }
    writeMessage(writer) {
        writer.writeInt(this.version);
        writer.writeString(this.dn);
        writer.writeString(this.password, asn1_1.Ber.Context);
    }
    parseMessage(reader) {
        this.version = reader.readInt();
        this.dn = reader.readString();
        const contextCheck = reader.peek();
        if (contextCheck !== asn1_1.Ber.Context) {
            let type = '<null>';
            if (contextCheck) {
                type = `0x${contextCheck.toString(16)}`;
            }
            throw new Error(`Authentication type not supported: ${type}`);
        }
        this.password = reader.readString(asn1_1.Ber.Context);
    }
}
exports.BindRequest = BindRequest;
//# sourceMappingURL=BindRequest.js.map