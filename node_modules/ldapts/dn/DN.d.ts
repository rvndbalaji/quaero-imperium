import { RDN, RDNAttributes } from './RDN';
/**
 * RDNMap is an interface, that maps every key & value to a specified RDN.
 *
 * Value can be either a string or a list of strings, where every value in the list will
 * get applied to the same key of an RDN.
 */
export interface RDNMap {
    [name: string]: string | string[];
}
/**
 * DN class provides chain building of multiple RDNs, which can be later build into
 * escaped string representation.
 */
export declare class DN {
    private rdns;
    constructor(rdns?: RDN[] | RDNMap);
    /**
     * Add an RDN component to the DN, consisting of key & value pair.
     *
     * @param key
     * @param value
     * @returns DN
     */
    addPairRDN(key: string, value: string): this;
    /**
     * Add a single RDN component to the DN.
     *
     * Note, that this RDN can be compound (single RDN can have multiple key & value pairs).
     * @param rdn
     * @returns DN
     */
    addRDN(rdn: RDN | RDNAttributes): this;
    /**
     * Add multiple RDN components to the DN.
     *
     * This method allows different interfaces to add RDNs into the DN.
     * It can:
     * - join other DN into this DN
     * - join list of RDNs or RDNAttributes into this DN
     * - create RDNs from object map, where every key & value will create a new RDN
     *
     * @param rdns
     * @returns DN
     */
    addRDNs(rdns: RDN[] | RDNAttributes[] | RDNMap | DN): this;
    getRDNs(): RDN[];
    get(index: number): RDN;
    set(rdn: RDN | RDNAttributes, index: number): this;
    isEmpty(): boolean;
    /**
     * Checks, if this instance of DN is equal to the other DN.
     *
     * @param other
     */
    equals(other: DN): boolean;
    parent(): DN | null;
    parentOf(dn: DN): boolean;
    clone(): DN;
    reverse(): this;
    pop(): RDN | undefined;
    shift(): RDN | undefined;
    /**
     * Parse the DN, escape values & return a string representation.
     */
    toString(): string;
}
